<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>shell on Notes by Grayside</title><link>https://notes.grayside.dev/tags/shell/</link><description>Recent content in shell on Notes by Grayside</description><generator>Hugo -- gohugo.io</generator><language>en</language><copyright>Copyright 2023 Adam Ross</copyright><lastBuildDate>Sat, 27 Jan 2024 20:07:57 +0000</lastBuildDate><docs>https://validator.w3.org/feed/docs/rss2.html</docs><ttl>1440</ttl><skipHours><hour>7</hour><hour>8</hour><hour>9</hour><hour>10</hour><hour>11</hour><hour>12</hour><hour>13</hour><hour>14</hour><hour>15</hour></skipHours><atom:link href="https://notes.grayside.dev/tags/shell/index.xml" rel="self" type="application/rss+xml"/><item><title>Configuring Hugo Base URL in Codespaces</title><link>https://notes.grayside.dev/posts/tools/hugo-base-url-in-codespaces/</link><pubDate>Sat, 27 Jan 2024 20:07:57 +0000</pubDate><guid>https://notes.grayside.dev/posts/tools/hugo-base-url-in-codespaces/</guid><description>&lt;p>Learning about &lt;a href="https://docs.github.com/en/codespaces/overview">Codespaces&lt;/a>,
and more specifically, &lt;a href="https://gohugo.io/">Hugo&lt;/a> and &lt;a href="https://taskfile.dev">Taskfile&lt;/a>
in Codespaces.&lt;/p>
&lt;p>My theme&amp;rsquo;s starter gave me a devcontainer based on the (now archived)
&lt;a href="https://github.com/microsoft/vscode-dev-containers/blob/main/containers/hugo">community devcontainer for Hugo&lt;/a>.&lt;/p>
&lt;p>Running inside the codespace defined by this container, running &lt;code>hugo serve&lt;/code>
with the Codespaces port forwarding works well. However, when run this way,
Hugo hasn&amp;rsquo;t been configured with the correct base URL which could break
functionality dependent on the full URL, such as validating RSS or
single-origin scripts.&lt;/p>
&lt;h2 id="setting-the-right-base-url-in-codespace-dev">Setting the right base URL in codespace dev&lt;/h2>
&lt;p>Some quick research found an
&lt;a href="https://github.com/shotor/hugo-codespaces-example?tab=readme-ov-file#debug-on-codespaces">example repository&lt;/a>
with a README that provided the tweaks needed for the hugo command:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>hugo server --baseUrl &lt;span style="color:#e6db74">&amp;#34;https://{githubUrl}&amp;#34;&lt;/span> --appendPort&lt;span style="color:#f92672">=&lt;/span>false
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>How do you get &lt;code>githubUrl&lt;/code>?&lt;/p>
&lt;p>There are a couple methods for this, such as going to the browser preview tab
and copying the base URL. Pulling that into your codespace terminal, that might look like:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>githubUrl&lt;span style="color:#f92672">=&lt;/span>stellar-codespace-id-sn2ggl3bl4rn3y-1313.app.github.dev
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>hugo server --baseUrl &lt;span style="color:#e6db74">&amp;#34;https://{githubUrl}&amp;#34;&lt;/span> --appendPort&lt;span style="color:#f92672">=&lt;/span>false
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>However, that&amp;rsquo;s a manual step that&amp;rsquo;s needed almost per work session.&lt;/p>
&lt;h2 id="zero-config-version">Zero Config Version&lt;/h2>
&lt;p>Inspecting the terminal environment of the codespace, it turns out the pieces
of the codespace domain are available via built-in environment variables:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>app.github.dev&lt;/strong> is sourced from &lt;code>GITHUB_CODESPACES_PORT_FORWARDING_DOMAIN&lt;/code>&lt;/li>
&lt;li>&lt;strong>stellar-codespace-id-sn2ggl3bl4rn3y&lt;/strong> is sourced from &lt;code>CODESPACE_NAME&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>Leaning on these variables, we can simplify the command to something with zero
additional configuration:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>hugo server --baseURL &lt;span style="color:#e6db74">&amp;#34;https://&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>CODESPACE_NAME&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">-1313.&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>GITHUB_CODESPACES_PORT_FORWARDING_DOMAIN&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span> --appendPort&lt;span style="color:#f92672">=&lt;/span>false
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Note the browser preview on this command injects the port as part of the domain, it ends up looking like:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>https://&lt;span style="color:#e6db74">${&lt;/span>CODESPACE_NAME&lt;span style="color:#e6db74">}&lt;/span>-1313.&lt;span style="color:#e6db74">${&lt;/span>GITHUB_CODESPACES_PORT_FORWARDING_DOMAIN&lt;span style="color:#e6db74">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Where 1313 is the hugo server default port.&lt;/p>
&lt;h2 id="bringing-this-to-taskfile">Bringing this to Taskfile&lt;/h2>
&lt;p>I’ve started exploring the use of &lt;a href="http://taskfile.dev">taskfile.dev&lt;/a> for task management,
and an adaptation of this command might look like:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>version: &lt;span style="color:#e6db74">&amp;#39;3&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>tasks:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cs-serve:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cmds:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - |
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> hugo server --appendPort&lt;span style="color:#f92672">=&lt;/span>false --baseURL &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> &lt;span style="color:#e6db74">&amp;#34;https://{{ .CODESPACE_NAME }}-1313.{{ .GITHUB_CODESPACES_PORT_FORWARDING_DOMAIN }}&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> requires:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> vars: &lt;span style="color:#f92672">[&lt;/span>CODESPACE_NAME, GITHUB_CODESPACES_PORT_FORWARDING_DOMAIN&lt;span style="color:#f92672">]&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Rather than make &lt;a href="https://taskfile.dev/usage/#env-files">direct use of environment variables&lt;/a>,
I’m using &lt;a href="https://taskfile.dev/usage/#variables">taskfile variables&lt;/a>
that inherit values from the environment. This way I can make these special
codespace environment variables required before execution without adding
more complex shell code.&lt;/p></description><category>til</category><category>codespaces</category><category>hugo</category><category>shell</category><category>taskfile</category></item><item><title>Timelock: Control when a command can run</title><link>https://notes.grayside.dev/posts/shell/timelock/</link><pubDate>Wed, 15 Feb 2023 11:45:44 -0800</pubDate><guid>https://notes.grayside.dev/posts/shell/timelock/</guid><description>&lt;p>tl;dr: Script to prevent another script from running more often than every 24 hours.&lt;/p>
&lt;p>Some types of local developer environment operations should happen on a regular
basis but don&amp;rsquo;t fit into cron. Things like updating &lt;a href="https://brew.sh/">homebrew dependencies&lt;/a>.&lt;/p>
&lt;p>Some reasons things may not be a good fit for cron:&lt;/p>
&lt;ul>
&lt;li>You want to see what will/has happened in detail when it happens&lt;/li>
&lt;li>You don&amp;rsquo;t want to remember how to investigate when cron operations fail&lt;/li>
&lt;/ul>
&lt;p>Today&amp;rsquo;s solution? Run these tasks automatically after something else I know I will do,
such as loading my &lt;code>.bash_profile&lt;/code> when I open a new terminal session.&lt;/p>
&lt;h2 id="timelock">Timelock&lt;/h2>
&lt;p>My timelock script wraps is shell executable argument in checks to prevent them
from being run more often than every 24 hours. Time is configurable by the
&lt;code>TIMELOCK_DELAY_SECONDS&lt;/code> environment variable.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#!/usr/bin/env bash
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>set -eu
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">##&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># timelock.sh&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Run supplied command no more than every 24 hours.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Usage:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># timelock.sh ~/bin/brew-install.sh&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># VERBOSE=1 timelock.sh ~/bin/brew-install.sh&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>TIMELOCK&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>TIMELOCK_DELAY_SECONDS&lt;span style="color:#66d9ef">:-&lt;/span>86400&lt;span style="color:#e6db74">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># The operation being run is the first argument sent to the timelock.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>operation&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#66d9ef">$(&lt;/span>basename $1&lt;span style="color:#66d9ef">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>store&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>$HOME&lt;span style="color:#e6db74">/.config/&lt;/span>&lt;span style="color:#66d9ef">$(&lt;/span>whoami&lt;span style="color:#66d9ef">)&lt;/span>&lt;span style="color:#e6db74">-bin/&lt;/span>$operation&lt;span style="color:#e6db74">.last-run&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>mkdir -p &lt;span style="color:#66d9ef">$(&lt;/span>dirname &lt;span style="color:#e6db74">&amp;#34;&lt;/span>$store&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#66d9ef">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>last_run&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#66d9ef">$(&lt;/span>cat &lt;span style="color:#e6db74">&amp;#34;&lt;/span>$store&lt;span style="color:#e6db74">&amp;#34;&lt;/span> 2&amp;gt;/dev/null &lt;span style="color:#f92672">||&lt;/span> echo 0&lt;span style="color:#66d9ef">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>now&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#66d9ef">$(&lt;/span>date +%s&lt;span style="color:#66d9ef">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>elapsed&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#66d9ef">$((&lt;/span>now-last_run&lt;span style="color:#66d9ef">))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#f92672">((&lt;/span> &lt;span style="color:#e6db74">&amp;#34;&lt;/span>$elapsed&lt;span style="color:#e6db74">&amp;#34;&lt;/span> &amp;lt; &lt;span style="color:#e6db74">&amp;#34;&lt;/span>$TIMELOCK&lt;span style="color:#e6db74">&amp;#34;&lt;/span> &lt;span style="color:#f92672">))&lt;/span>; &lt;span style="color:#66d9ef">then&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> lock_duration&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#66d9ef">$(&lt;/span>eval &lt;span style="color:#e6db74">&amp;#34;echo &lt;/span>&lt;span style="color:#66d9ef">$(&lt;/span>gdate -ud &lt;span style="color:#e6db74">&amp;#34;@&lt;/span>$TIMELOCK&lt;span style="color:#e6db74">&amp;#34;&lt;/span> +&lt;span style="color:#e6db74">&amp;#39;$((%s/3600/24)) days %H hours %M minutes %S seconds&amp;#39;&lt;/span>&lt;span style="color:#66d9ef">)&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#66d9ef">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> last_run_date&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#66d9ef">$(&lt;/span>gdate -u -d @&lt;span style="color:#e6db74">&amp;#34;&lt;/span>$last_run&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#66d9ef">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">[[&lt;/span> &lt;span style="color:#66d9ef">$(&lt;/span>type -t vlog&lt;span style="color:#66d9ef">)&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#f92672">]]&lt;/span> &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> vlog &lt;span style="color:#e6db74">&amp;#34;timelocked (&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>operation&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">): Waiting until &lt;/span>&lt;span style="color:#e6db74">${&lt;/span>lock_duration&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74"> hours after &lt;/span>&lt;span style="color:#e6db74">${&lt;/span>last_run_date&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74"> before running&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> exit &lt;span style="color:#ae81ff">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">fi&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#f92672">((&lt;/span> &lt;span style="color:#e6db74">&amp;#34;&lt;/span>$last_run&lt;span style="color:#e6db74">&amp;#34;&lt;/span> &amp;gt; &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#f92672">))&lt;/span>; &lt;span style="color:#66d9ef">then&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> elapsed_duration&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#66d9ef">$(&lt;/span>eval &lt;span style="color:#e6db74">&amp;#34;echo &lt;/span>&lt;span style="color:#66d9ef">$(&lt;/span>gdate -ud &lt;span style="color:#e6db74">&amp;#34;@&lt;/span>$elapsed&lt;span style="color:#e6db74">&amp;#34;&lt;/span> +&lt;span style="color:#e6db74">&amp;#39;$((%s/3600/24)) days %H hours %M minutes %S seconds&amp;#39;&lt;/span>&lt;span style="color:#66d9ef">)&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#66d9ef">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> echo &lt;span style="color:#e6db74">&amp;#34;timelocked (&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>operation&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">): Running script (&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>elapsed_duration&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74"> hours since last run)&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">else&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> echo &lt;span style="color:#e6db74">&amp;#34;timelocked (&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>operation&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">): Running script for the first time&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">fi&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>$@&lt;span style="color:#e6db74">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Update latest run time.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>echo &lt;span style="color:#e6db74">&amp;#34;&lt;/span>$now&lt;span style="color:#e6db74">&amp;#34;&lt;/span> &amp;gt; &lt;span style="color:#e6db74">&amp;#34;&lt;/span>$store&lt;span style="color:#e6db74">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>vlog&lt;/code> is a custom function in my &lt;code>.bashrc&lt;/code>. It looks like this:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>vlog&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> test -z &lt;span style="color:#e6db74">&amp;#34;&lt;/span>$VERBOSE&lt;span style="color:#e6db74">&amp;#34;&lt;/span> &lt;span style="color:#f92672">||&lt;/span> echo &lt;span style="color:#e6db74">&amp;#34;[v] &lt;/span>$@&lt;span style="color:#e6db74">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Make vlog available in my scripts.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>export -f vlog
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="what-it-looks-like">What it looks like&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-txt" data-lang="txt">&lt;span style="display:flex;">&lt;span>$&amp;gt; timelock.sh echo &amp;#34;hello&amp;#34;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>timelocked (echo): Running script (0 days 00 hours 18 minutes 48 seconds hours since last run)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>hello
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$&amp;gt; VERBOSE=1 timelock.sh echo &amp;#34;hello&amp;#34;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>[v] timelocked (echo): Waiting until 1 days 00 hours 00 minutes 00 seconds hours after Tue Feb 14 05:04:15 UTC 2023 before running
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="limitations-constraints--considerations">Limitations, Constraints, &amp;amp; Considerations&lt;/h2>
&lt;ol>
&lt;li>
&lt;p>The &amp;ldquo;&lt;a href="https://logicgrimoire.wordpress.com/2015/05/05/the-sentinel-file-pattern-3/">sentinel file&lt;/a>&amp;rdquo;
groups commands together by the first argument.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>operation&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#66d9ef">$(&lt;/span>basename $1&lt;span style="color:#66d9ef">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>store&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>$HOME&lt;span style="color:#e6db74">/.config/&lt;/span>&lt;span style="color:#66d9ef">$(&lt;/span>whoami&lt;span style="color:#66d9ef">)&lt;/span>&lt;span style="color:#e6db74">-bin/&lt;/span>$operation&lt;span style="color:#e6db74">.last-run&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>I use this to wrap custom scripts kept in a single directory, so I&amp;rsquo;m not
concerned with multiple scripts with the same filename or commands with
different arguments.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>If the timelock is active, the default is to do nothing and report nothing.
The custom verbose logging function (vlog) allows simple debug output if
I don&amp;rsquo;t trust the silence. (Or would, except it seems broken).&lt;/p>
&lt;/li>
&lt;li>
&lt;p>We&amp;rsquo;re not using &lt;code>exec&lt;/code> to run the command passed to timelock, so timelock
variables will be available in the called script. On the other hand, when
successful the script passes control back to timelock which can update the
sentinel.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>I&amp;rsquo;m writing the date to the file because it&amp;rsquo;s mildly less cryptic, but at
scale better to save the redundant storage:&lt;/p>
&lt;ul>
&lt;li>Create or update the sentinel: &lt;code>touch &amp;quot;$store&amp;quot;&lt;/code>&lt;/li>
&lt;li>Read the sentinel: &lt;code>date -r &amp;quot;$store&amp;quot; +%s&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol></description><category>til</category><category>shell</category><category>sentinel</category><category>productivity</category></item><item><title>GitHub Actions: 'tee' is for Environment Variables</title><link>https://notes.grayside.dev/posts/tools/gha-env-vars/</link><pubDate>Tue, 31 Jan 2023 10:25:51 -0800</pubDate><guid>https://notes.grayside.dev/posts/tools/gha-env-vars/</guid><description>&lt;p>In 2020 GitHub changed the recommended practice for dynamically setting environment
variables because of a security vulnerability: &lt;a href="https://github.blog/changelog/2020-10-01-github-actions-deprecating-set-env-and-add-path-commands/">GitHub Actions: Deprecating set-env and add-path commands
&lt;/a>&lt;/p>
&lt;p>I missed this until I noticed console warnings.&lt;/p>
&lt;p>However, sometimes I like to check the environment variable I&amp;rsquo;ve just set, and
this model of piping to a file inspired me.&lt;/p>
&lt;p>Instead of a simple append operation:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">Set Environment&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>- &lt;span style="color:#f92672">run&lt;/span>: &lt;span style="color:#ae81ff">echo &amp;#34;MY_VARIABLE=${PWD}/cool/data/path&amp;#34; &amp;gt;&amp;gt; $GITHUB_ENV&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>You can both append and see the result by using &lt;code>tee -a&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">Set Environment&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>- &lt;span style="color:#f92672">run&lt;/span>: &lt;span style="color:#ae81ff">echo &amp;#34;MY_VARIABLE=${PWD}/cool/data/path&amp;#34; | tee -a $GITHUB_ENV&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description><category>til</category><category>gha</category><category>testing</category><category>environment</category><category>shell</category></item></channel></rss>