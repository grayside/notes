<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Notes by Grayside</title><link>https://notes.grayside.dev/</link><description>Recent content on Notes by Grayside</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>Copyright 2023 Adam Ross</copyright><lastBuildDate>Tue, 31 Jan 2023 10:25:51 -0800</lastBuildDate><docs>https://validator.w3.org/feed/docs/rss2.html</docs><ttl>1440</ttl><skipHours><hour>7</hour><hour>8</hour><hour>9</hour><hour>10</hour><hour>11</hour><hour>12</hour><hour>13</hour><hour>14</hour><hour>15</hour></skipHours><atom:link href="https://notes.grayside.dev/index.xml" rel="self" type="application/rss+xml"/><item><title>GitHub Actions: 'tee' is for Environment Variables</title><link>https://notes.grayside.dev/posts/tools/gha-env-vars/</link><pubDate>Tue, 31 Jan 2023 10:25:51 -0800</pubDate><guid>https://notes.grayside.dev/posts/tools/gha-env-vars/</guid><description>&lt;p>In 2020 GitHub changed the recommended practice for dynamically setting environment
variables because of a security vulnerability: &lt;a href="https://github.blog/changelog/2020-10-01-github-actions-deprecating-set-env-and-add-path-commands/">GitHub Actions: Deprecating set-env and add-path commands
&lt;/a>&lt;/p>
&lt;p>I missed this until I noticed console warnings.&lt;/p>
&lt;p>However, sometimes I like to check the environment variable I&amp;rsquo;ve just set, and
this model of piping to a file inspired me.&lt;/p>
&lt;p>Instead of a simple append operation:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">Set Environment&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>- &lt;span style="color:#f92672">run&lt;/span>: &lt;span style="color:#ae81ff">echo &amp;#34;MY_VARIABLE=${PWD}/cool/data/path}&amp;#34; &amp;gt;&amp;gt; $GITHUB_ENV&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>You can both append and see the result by using &lt;code>tee -a&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">Set Environment&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>- &lt;span style="color:#f92672">run&lt;/span>: &lt;span style="color:#ae81ff">echo &amp;#34;MY_VARIABLE=${PWD}/cool/data/path}&amp;#34; | tee -a $GITHUB_ENV&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Fighting the Forward Slashes with Go's MapFS</title><link>https://notes.grayside.dev/posts/go/mapfs-forward-slash/</link><pubDate>Sat, 28 Jan 2023 11:34:34 -0800</pubDate><guid>https://notes.grayside.dev/posts/go/mapfs-forward-slash/</guid><description>&lt;p>Today I&amp;rsquo;m recounting my adventures in using MapFS to write unit tests for code
that walks filesystems defined using io/fs.FS. MapFS is easy to start with, but
there is a rough edge if you try to define absolute paths in your map.&lt;/p>
&lt;p>I assumed I should use absolute paths. When my tests started to segfault, it was
very confusing.&lt;/p>
&lt;p>I found &lt;a href="https://github.com/golang/go/issues/34591">go/issues/34591&lt;/a> which seems
to describe the same problem, but is not about the fstest package implementation.&lt;/p>
&lt;h2 id="solution-1-ubiquitous-warning">Solution 1: Ubiquitous Warning&lt;/h2>
&lt;p>To make sure I don&amp;rsquo;t forget this problem, preface each MapFS instantiation
with this comment:&lt;/p>
&lt;pre tabindex="0">&lt;code>// WARNING: Paths that start with leading slashes give stack overflows.
// Closest issue I&amp;#39;ve tracked down: https://github.com/golang/go/issues/34591
&lt;/code>&lt;/pre>&lt;p>I really appreciate well explained code, but it&amp;rsquo;s better for orienting new
developers than reminding yourself of a problem: I will get used to not reading
this comment, and that habit will probably stick with me longer than my recollection
of the problem.&lt;/p>
&lt;h2 id="solution-2-validate-the-map">Solution 2: Validate the Map&lt;/h2>
&lt;p>You could implement a constructor or validation function like
&lt;code>validateMapFS(fstest.MapFS) error&lt;/code>, but this doesn&amp;rsquo;t seem that much better than
the comment and requires just as much remembering to take an extra step.&lt;/p>
&lt;p>Since a MapFS is a &lt;code>map&lt;/code>, this might look like:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">validateMapFS&lt;/span>(&lt;span style="color:#a6e22e">m&lt;/span> &lt;span style="color:#a6e22e">fstest&lt;/span>.&lt;span style="color:#a6e22e">MapFS&lt;/span>) &lt;span style="color:#66d9ef">error&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#a6e22e">k&lt;/span>, &lt;span style="color:#a6e22e">_&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#66d9ef">range&lt;/span> &lt;span style="color:#a6e22e">m&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">k&lt;/span>[&lt;span style="color:#ae81ff">0&lt;/span>] &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#e6db74">&amp;#39;/&amp;#39;&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">errors&lt;/span>.&lt;span style="color:#a6e22e">New&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;do not use absolute paths in MapFS, bad key &amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#a6e22e">k&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="solution-3-test-case-utility">Solution 3: Test Case Utility&lt;/h2>
&lt;p>If I need to remember to do something, maybe the answer is to make it valuable
in more than one way. My goal in using MapFS is not using MapFS. My goal is to
define test cases for code that only cares about filesystem contents.&lt;/p>
&lt;p>So what if I go back to writing my tests with clean table tests and use a helper
to create the MapFS my code expects to receive?&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">package&lt;/span> &lt;span style="color:#a6e22e">testhelper&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;io/fs&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;testing&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;testing/fstest&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">TestCase&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">path&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">data&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">want&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">NewMapFSFromTestCases&lt;/span>(&lt;span style="color:#a6e22e">t&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">testing&lt;/span>.&lt;span style="color:#a6e22e">T&lt;/span>, &lt;span style="color:#a6e22e">testCases&lt;/span> []&lt;span style="color:#a6e22e">TestCase&lt;/span>) &lt;span style="color:#a6e22e">fs&lt;/span>.&lt;span style="color:#a6e22e">FS&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">t&lt;/span>.&lt;span style="color:#a6e22e">Helper&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">fsys&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> make(&lt;span style="color:#a6e22e">fstest&lt;/span>.&lt;span style="color:#a6e22e">MapFS&lt;/span>, len(&lt;span style="color:#a6e22e">testCases&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#a6e22e">_&lt;/span>, &lt;span style="color:#a6e22e">tc&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#66d9ef">range&lt;/span> &lt;span style="color:#a6e22e">testCases&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> len(&lt;span style="color:#a6e22e">tc&lt;/span>.&lt;span style="color:#a6e22e">path&lt;/span>) &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">t&lt;/span>.&lt;span style="color:#a6e22e">Fatalf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;no path specified for want %q&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">tc&lt;/span>.&lt;span style="color:#a6e22e">want&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> string(&lt;span style="color:#a6e22e">tc&lt;/span>.&lt;span style="color:#a6e22e">path&lt;/span>[&lt;span style="color:#ae81ff">0&lt;/span>]) &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#e6db74">&amp;#34;/&amp;#34;&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">t&lt;/span>.&lt;span style="color:#a6e22e">Fatal&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Invalid fstest.MapFS path: cannot start with leading slash. This is not documented as part of fstest.MapFS. See https://github.com/golang/go/issues/34591&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">fsys&lt;/span>[&lt;span style="color:#a6e22e">tc&lt;/span>.&lt;span style="color:#a6e22e">path&lt;/span>] = &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">fstest&lt;/span>.&lt;span style="color:#a6e22e">MapFile&lt;/span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Data&lt;/span>: []byte(&lt;span style="color:#a6e22e">tc&lt;/span>.&lt;span style="color:#a6e22e">data&lt;/span>),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">fsys&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>In my test code, I define my test cases, call this function to generate the
filesystem input for the function under test, then proceed with testing.&lt;/p>
&lt;h2 id="nest-steps">Nest Steps&lt;/h2>
&lt;ul>
&lt;li>&lt;input disabled="" type="checkbox"> File a bug&lt;/li>
&lt;/ul>
&lt;h2 id="background-references">Background References&lt;/h2>
&lt;ul>
&lt;li>&lt;strong>Packages:&lt;/strong> &lt;a href="https://pkg.go.dev/testing/fstest">testing/fstest&lt;/a>&lt;/li>
&lt;li>&lt;strong>Useful Article:&lt;/strong> &lt;a href="https://bitfieldconsulting.com/golang/filesystems">Walking with filesystems: Go&amp;rsquo;s new fs.FS interface&lt;/a>&lt;/li>
&lt;/ul></description></item></channel></rss>