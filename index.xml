<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Notes by Grayside</title><link>https://notes.grayside.dev/</link><description>Recent content on Notes by Grayside</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>Copyright 2023 Adam Ross</copyright><lastBuildDate>Mon, 06 Feb 2023 09:18:54 -0800</lastBuildDate><docs>https://validator.w3.org/feed/docs/rss2.html</docs><ttl>1440</ttl><skipHours><hour>7</hour><hour>8</hour><hour>9</hour><hour>10</hour><hour>11</hour><hour>12</hour><hour>13</hour><hour>14</hour><hour>15</hour></skipHours><atom:link href="https://notes.grayside.dev/index.xml" rel="self" type="application/rss+xml"/><item><title>Collecting Data while walkng a filesystem with Go</title><link>https://notes.grayside.dev/posts/go/walkdir-collection/</link><pubDate>Mon, 06 Feb 2023 09:18:54 -0800</pubDate><guid>https://notes.grayside.dev/posts/go/walkdir-collection/</guid><description>&lt;p>There are several ways to use &lt;a href="https://pkg.go.dev/io/fs#WalkDir">&lt;code>fs.WalkDir&lt;/code>&lt;/a>
to collect data.&lt;/p>
&lt;h2 id="basic-fswalkdir">Basic &lt;code>fs.WalkDir&lt;/code>&lt;/h2>
&lt;p>Here&amp;rsquo;s a relatively simple WalkDir to print all paths that start with &amp;ldquo;magic/&amp;rdquo;.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">ImportantBusinessFunc&lt;/span>(&lt;span style="color:#a6e22e">fsys&lt;/span> &lt;span style="color:#a6e22e">fs&lt;/span>.&lt;span style="color:#a6e22e">FS&lt;/span>) (&lt;span style="color:#66d9ef">error&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">fs&lt;/span>.&lt;span style="color:#a6e22e">WalkDir&lt;/span>(&lt;span style="color:#a6e22e">fsys&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;.&amp;#34;&lt;/span>, &lt;span style="color:#66d9ef">func&lt;/span>(&lt;span style="color:#a6e22e">path&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>, &lt;span style="color:#a6e22e">dir&lt;/span> &lt;span style="color:#a6e22e">fs&lt;/span>.&lt;span style="color:#a6e22e">DirEntry&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#66d9ef">error&lt;/span>) &lt;span style="color:#66d9ef">error&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> !&lt;span style="color:#a6e22e">strings&lt;/span>.&lt;span style="color:#a6e22e">HasPrefix&lt;/span>(&lt;span style="color:#a6e22e">path&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;magic/&amp;#34;&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Println&lt;/span>(&lt;span style="color:#a6e22e">path&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> })
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This doesn&amp;rsquo;t help because I want to collect those paths, not just print them out.&lt;/p>
&lt;h2 id="add-collector-slice">Add Collector Slice&lt;/h2>
&lt;p>Assemble data by instantiating a collector that we can add to as we walk.&lt;/p>
&lt;p>(WalkDir is not concurrent.)&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">ImportantBusinessFunc&lt;/span>(&lt;span style="color:#a6e22e">fsys&lt;/span> &lt;span style="color:#a6e22e">fs&lt;/span>.&lt;span style="color:#a6e22e">FS&lt;/span>) ([]&lt;span style="color:#66d9ef">string&lt;/span>, &lt;span style="color:#66d9ef">error&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">s&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> []&lt;span style="color:#66d9ef">string&lt;/span>{}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">fs&lt;/span>.&lt;span style="color:#a6e22e">WalkDir&lt;/span>(&lt;span style="color:#a6e22e">fsys&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;.&amp;#34;&lt;/span>, &lt;span style="color:#66d9ef">func&lt;/span>(&lt;span style="color:#a6e22e">path&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>, &lt;span style="color:#a6e22e">dir&lt;/span> &lt;span style="color:#a6e22e">fs&lt;/span>.&lt;span style="color:#a6e22e">DirEntry&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#66d9ef">error&lt;/span>) &lt;span style="color:#66d9ef">error&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> !&lt;span style="color:#a6e22e">strings&lt;/span>.&lt;span style="color:#a6e22e">HasPrefix&lt;/span>(&lt;span style="color:#a6e22e">path&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;magic/&amp;#34;&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">s&lt;/span> = append(&lt;span style="color:#a6e22e">s&lt;/span>, &lt;span style="color:#a6e22e">path&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> })
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">s&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The function passed as a parameter to &lt;code>fs.WalkDir&lt;/code> is a closure, and lexical scoping
means variables defined in ImportantBusinessFunc are available inside contained closures.&lt;/p>
&lt;h2 id="pointer-to-a-collection">Pointer to a Collection&lt;/h2>
&lt;p>Suppose we want the file walking to be more reusable?&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">ImportantBusinessFunc&lt;/span>(&lt;span style="color:#a6e22e">fsys&lt;/span> &lt;span style="color:#a6e22e">fs&lt;/span>.&lt;span style="color:#a6e22e">FS&lt;/span>) ([]&lt;span style="color:#66d9ef">string&lt;/span>, &lt;span style="color:#66d9ef">error&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">s&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> []&lt;span style="color:#66d9ef">string&lt;/span>{}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">_importantBusiness&lt;/span>(&lt;span style="color:#a6e22e">fsys&lt;/span>, &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">s&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;magic/&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">s&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">_importantBusiness&lt;/span>(&lt;span style="color:#a6e22e">fsys&lt;/span> &lt;span style="color:#a6e22e">fs&lt;/span>.&lt;span style="color:#a6e22e">FS&lt;/span>, &lt;span style="color:#a6e22e">collector&lt;/span> &lt;span style="color:#f92672">*&lt;/span>[]&lt;span style="color:#66d9ef">string&lt;/span>, &lt;span style="color:#a6e22e">needle&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>) &lt;span style="color:#66d9ef">error&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">fs&lt;/span>.&lt;span style="color:#a6e22e">WalkDir&lt;/span>(&lt;span style="color:#a6e22e">fsys&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;.&amp;#34;&lt;/span>, &lt;span style="color:#66d9ef">func&lt;/span>(&lt;span style="color:#a6e22e">path&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>, &lt;span style="color:#a6e22e">dir&lt;/span> &lt;span style="color:#a6e22e">fs&lt;/span>.&lt;span style="color:#a6e22e">DirEntry&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#66d9ef">error&lt;/span>) &lt;span style="color:#66d9ef">error&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> !&lt;span style="color:#a6e22e">strings&lt;/span>.&lt;span style="color:#a6e22e">HasPrefix&lt;/span>(&lt;span style="color:#a6e22e">path&lt;/span>, &lt;span style="color:#a6e22e">needle&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">collector&lt;/span> = append(&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">collector&lt;/span>, &lt;span style="color:#a6e22e">path&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> })
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description><category>til</category><category>golang</category><category>lexical-scope</category><category>filesystem</category></item><item><title>Planning notes.grayside.dev</title><link>https://notes.grayside.dev/posts/this/site/</link><pubDate>Wed, 01 Feb 2023 10:56:54 -0800</pubDate><guid>https://notes.grayside.dev/posts/this/site/</guid><description>&lt;p>I&amp;rsquo;ve wanted to restart my tech blogging practice for several years. I have been
blocked multiple times by my own perfectionism: I tend to choose a path that
involves customizing the tools, get a backlog of &amp;ldquo;critical tasks&amp;rdquo;, then get
distracted before launching.&lt;/p>
&lt;p>This time I defined a very minimal scope, launched a site with one post, and then
began improving it. The next challenge is feeling ready to broadly share links.&lt;/p>
&lt;h2 id="objective">Objective&lt;/h2>
&lt;p>Build a practice of writing things down, and sharing. Get in more discussions.&lt;/p>
&lt;h2 id="non-goals">Non-goals&lt;/h2>
&lt;p>Produce perfectly polished posts presenting proof of professional potential.
(I&amp;rsquo;ll launch a separate site for that if I find time to write that way.)&lt;/p>
&lt;p>Measure things.&lt;/p>
&lt;h2 id="mvp">MVP&lt;/h2>
&lt;ul>
&lt;li>Easily write, publish and link to posts&lt;/li>
&lt;li>See lists of all posts, optionally broken down by tags&lt;/li>
&lt;li>An RSS feed lets other people read my posts the way I prefer to read theirs&lt;/li>
&lt;li>Site aesthetic has some personality&lt;/li>
&lt;li>If folks like the content, they can find me on Mastodon to start a good chat&lt;/li>
&lt;/ul>
&lt;h2 id="categories">Categories&lt;/h2>
&lt;ul>
&lt;li>&lt;strong>Hosting:&lt;/strong> Where will the site &amp;amp; code live?&lt;/li>
&lt;li>&lt;strong>Appearance:&lt;/strong> What does it look like, what does the site say about my &amp;ldquo;brand&amp;rdquo;?
What&amp;rsquo;s the quirkiness level between the inside of my head and a business card?&lt;/li>
&lt;li>&lt;strong>Maintenance:&lt;/strong> What will be involved in keeping this live?&lt;/li>
&lt;li>&lt;strong>Content creation experience:&lt;/strong> How will I create and update content?&lt;/li>
&lt;li>&lt;strong>Data:&lt;/strong> How will I back up data? Do I want to make it available for integrations?
Will having more structured data in front matter be worthwhile?&lt;/li>
&lt;/ul>
&lt;h2 id="maintenance--lifecycle-considerations">Maintenance &amp;amp; Lifecycle considerations&lt;/h2>
&lt;ul>
&lt;li>Bursty Attention&lt;/li>
&lt;li>Long-term site (5-10? years)&lt;/li>
&lt;li>Long-term data (forever)&lt;/li>
&lt;li>Minimal tools &amp;amp; expenses&lt;/li>
&lt;li>Durable automation&lt;/li>
&lt;li>Simplicity&lt;/li>
&lt;/ul>
&lt;h2 id="site-architecture--tooling">Site architecture &amp;amp; tooling&lt;/h2>
&lt;p>I chose to use &lt;a href="https://gohugo.io">Hugo&lt;/a> as a static site generation tool.&lt;/p>
&lt;ul>
&lt;li>As a tool shipped as a binary, it&amp;rsquo;s likely to continue working to some extent
even if maintenance stops&lt;/li>
&lt;li>As a Go-based tool, I&amp;rsquo;m familiar with the templating, language, and ecosystem
such that I will be comfortable customizing site behaviors or contributing to
the community.&lt;/li>
&lt;li>&lt;code>hugo serve&lt;/code> is a nice development experience&lt;/li>
&lt;/ul>
&lt;p>I&amp;rsquo;m using GitHub to host my code because I live there.&lt;/p>
&lt;p>I&amp;rsquo;m using GitHub Pages to host my site:&lt;/p>
&lt;ul>
&lt;li>Keep number of vendors/dependencies minimal&lt;/li>
&lt;li>Avoid managing hardware&lt;/li>
&lt;li>Already familiar with using GitHub Workflows to work with GitHub Pages&lt;/li>
&lt;/ul>
&lt;h2 id="deploying-content">Deploying content&lt;/h2>
&lt;p>As a static site, the critical day to day use case is creating and publishing
content&lt;/p>
&lt;p>git commit / git push is a very simple deploy model that I&amp;rsquo;m used to with code.
Extending it to content is natural.&lt;/p>
&lt;p>The downside of this is using GitHub on my phone to author new content is not a
great experience. I might want to consider if there is a good app that streamlines
content creation backed by GitHub. It may also be interesting to see if I could
publish from a &lt;a href="https://notion.so">Notion&lt;/a> workspace.&lt;/p>
&lt;h2 id="choosing-a-theme-and-evaluating-customizations">Choosing a Theme and Evaluating Customizations&lt;/h2>
&lt;p>For this site, I decided to present my identity as a coder and have more fun with
the look. I don&amp;rsquo;t anticipate posting links to it in LinkedIn or trying to impress
employers. I&amp;rsquo;m hoping to start discussions with other techies.&lt;/p>
&lt;p>I found the &lt;a href="https://themes.gohugo.io/themes/hugo-theme-terminal/">terminal theme&lt;/a>
in the &lt;a href="https://themes.gohugo.io/">hugo theme gallery&lt;/a> and made a few changes:&lt;/p>
&lt;ul>
&lt;li>I used the theme&amp;rsquo;s built-in mechanism for customizations to add my own styling&lt;/li>
&lt;li>I completely overrode the theme&amp;rsquo;s RSS template and I&amp;rsquo;m okay with that!&lt;/li>
&lt;/ul>
&lt;p>In general this theme is good. So far I&amp;rsquo;ve noticed a few drawbacks:&lt;/p>
&lt;ul>
&lt;li>It doesn&amp;rsquo;t produce semantic HTML5 markup&lt;/li>
&lt;li>It&amp;rsquo;s got some accessibility and web performance optimization opportunities&lt;/li>
&lt;li>A couple of the templates could be decomposed into more targeted partial templates
for ease of customization&lt;/li>
&lt;/ul>
&lt;p>I&amp;rsquo;m avoiding customizing the theme templates because I&amp;rsquo;d really prefer to inherit
improvements from upstream. I&amp;rsquo;m currently watching the repository to see if
community Pull Requests are accepted.&lt;/p>
&lt;h2 id="what-if-the-tools-go-away">What if the tools go away?&lt;/h2>
&lt;ul>
&lt;li>Backup the site with git clone&lt;/li>
&lt;li>Switch the theme to many others others in Hugo, possibly set some overrides in
configuration or frontmatter to line up with design choices&lt;/li>
&lt;li>Switch from hugo to other static site generator: markdown with yaml front matter
is a pretty common format and if some of the data model isn&amp;rsquo;t supported the
migration model can be &amp;ldquo;Search and Replace&amp;rdquo;&lt;/li>
&lt;/ul></description><category>decisions</category><category>website</category><category>static-site-generator</category><category>hugo</category><category>notes.grayside.dev</category></item><item><title>GitHub Actions: 'tee' is for Environment Variables</title><link>https://notes.grayside.dev/posts/tools/gha-env-vars/</link><pubDate>Tue, 31 Jan 2023 10:25:51 -0800</pubDate><guid>https://notes.grayside.dev/posts/tools/gha-env-vars/</guid><description>&lt;p>In 2020 GitHub changed the recommended practice for dynamically setting environment
variables because of a security vulnerability: &lt;a href="https://github.blog/changelog/2020-10-01-github-actions-deprecating-set-env-and-add-path-commands/">GitHub Actions: Deprecating set-env and add-path commands
&lt;/a>&lt;/p>
&lt;p>I missed this until I noticed console warnings.&lt;/p>
&lt;p>However, sometimes I like to check the environment variable I&amp;rsquo;ve just set, and
this model of piping to a file inspired me.&lt;/p>
&lt;p>Instead of a simple append operation:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">Set Environment&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>- &lt;span style="color:#f92672">run&lt;/span>: &lt;span style="color:#ae81ff">echo &amp;#34;MY_VARIABLE=${PWD}/cool/data/path&amp;#34; &amp;gt;&amp;gt; $GITHUB_ENV&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>You can both append and see the result by using &lt;code>tee -a&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">Set Environment&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>- &lt;span style="color:#f92672">run&lt;/span>: &lt;span style="color:#ae81ff">echo &amp;#34;MY_VARIABLE=${PWD}/cool/data/path&amp;#34; | tee -a $GITHUB_ENV&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description><category>til</category><category>gha</category><category>testing</category><category>environment</category><category>shell</category></item><item><title>Fighting the Forward Slashes with Go's MapFS</title><link>https://notes.grayside.dev/posts/go/mapfs-forward-slash/</link><pubDate>Sat, 28 Jan 2023 11:34:34 -0800</pubDate><guid>https://notes.grayside.dev/posts/go/mapfs-forward-slash/</guid><description>&lt;p>Today I&amp;rsquo;m recounting my adventures in using MapFS to write unit tests for code
that walks filesystems defined using io/fs.FS. MapFS is easy to start with, but
there is a rough edge if you try to define absolute paths in your map.&lt;/p>
&lt;p>I assumed I should use absolute paths. When my tests started to segfault, it was
very confusing.&lt;/p>
&lt;p>I found &lt;a href="https://github.com/golang/go/issues/34591">go/issues/34591&lt;/a> which seems
to describe the same problem, but is not about the fstest package implementation.&lt;/p>
&lt;h2 id="solution-1-ubiquitous-warning">Solution 1: Ubiquitous Warning&lt;/h2>
&lt;p>To make sure I don&amp;rsquo;t forget this problem, preface each MapFS instantiation
with this comment:&lt;/p>
&lt;pre tabindex="0">&lt;code>// WARNING: Paths that start with leading slashes give stack overflows.
// Closest issue I&amp;#39;ve tracked down: https://github.com/golang/go/issues/34591
&lt;/code>&lt;/pre>&lt;p>I really appreciate well explained code, but it&amp;rsquo;s better for orienting new
developers than reminding yourself of a problem: I will get used to not reading
this comment, and that habit will probably stick with me longer than my recollection
of the problem.&lt;/p>
&lt;h2 id="solution-2-validate-the-map">Solution 2: Validate the Map&lt;/h2>
&lt;p>You could implement a constructor or validation function like
&lt;code>validateMapFS(fstest.MapFS) error&lt;/code>, but this doesn&amp;rsquo;t seem that much better than
the comment and requires just as much remembering to take an extra step.&lt;/p>
&lt;p>Since a MapFS is a &lt;code>map&lt;/code>, this might look like:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">validateMapFS&lt;/span>(&lt;span style="color:#a6e22e">m&lt;/span> &lt;span style="color:#a6e22e">fstest&lt;/span>.&lt;span style="color:#a6e22e">MapFS&lt;/span>) &lt;span style="color:#66d9ef">error&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#a6e22e">k&lt;/span>, &lt;span style="color:#a6e22e">_&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#66d9ef">range&lt;/span> &lt;span style="color:#a6e22e">m&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">k&lt;/span>[&lt;span style="color:#ae81ff">0&lt;/span>] &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#e6db74">&amp;#39;/&amp;#39;&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">errors&lt;/span>.&lt;span style="color:#a6e22e">New&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;do not use absolute paths in MapFS, bad key &amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#a6e22e">k&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="solution-3-test-case-utility">Solution 3: Test Case Utility&lt;/h2>
&lt;p>If I need to remember to do something, maybe the answer is to make it valuable
in more than one way. My goal in using MapFS is not using MapFS. My goal is to
define test cases for code that only cares about filesystem contents.&lt;/p>
&lt;p>So what if I go back to writing my tests with clean table tests and use a helper
to create the MapFS my code expects to receive?&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">package&lt;/span> &lt;span style="color:#a6e22e">testhelper&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;io/fs&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;testing&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;testing/fstest&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">TestCase&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">path&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">data&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">want&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">NewMapFSFromTestCases&lt;/span>(&lt;span style="color:#a6e22e">t&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">testing&lt;/span>.&lt;span style="color:#a6e22e">T&lt;/span>, &lt;span style="color:#a6e22e">testCases&lt;/span> []&lt;span style="color:#a6e22e">TestCase&lt;/span>) &lt;span style="color:#a6e22e">fs&lt;/span>.&lt;span style="color:#a6e22e">FS&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">t&lt;/span>.&lt;span style="color:#a6e22e">Helper&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">fsys&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> make(&lt;span style="color:#a6e22e">fstest&lt;/span>.&lt;span style="color:#a6e22e">MapFS&lt;/span>, len(&lt;span style="color:#a6e22e">testCases&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#a6e22e">_&lt;/span>, &lt;span style="color:#a6e22e">tc&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#66d9ef">range&lt;/span> &lt;span style="color:#a6e22e">testCases&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> len(&lt;span style="color:#a6e22e">tc&lt;/span>.&lt;span style="color:#a6e22e">path&lt;/span>) &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">t&lt;/span>.&lt;span style="color:#a6e22e">Fatalf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;no path specified for want %q&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">tc&lt;/span>.&lt;span style="color:#a6e22e">want&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> string(&lt;span style="color:#a6e22e">tc&lt;/span>.&lt;span style="color:#a6e22e">path&lt;/span>[&lt;span style="color:#ae81ff">0&lt;/span>]) &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#e6db74">&amp;#34;/&amp;#34;&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">t&lt;/span>.&lt;span style="color:#a6e22e">Fatal&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Invalid fstest.MapFS path: cannot start with leading slash. This is not documented as part of fstest.MapFS. See https://github.com/golang/go/issues/34591&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">fsys&lt;/span>[&lt;span style="color:#a6e22e">tc&lt;/span>.&lt;span style="color:#a6e22e">path&lt;/span>] = &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">fstest&lt;/span>.&lt;span style="color:#a6e22e">MapFile&lt;/span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Data&lt;/span>: []byte(&lt;span style="color:#a6e22e">tc&lt;/span>.&lt;span style="color:#a6e22e">data&lt;/span>),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">fsys&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>In my test code, I define my test cases, call this function to generate the
filesystem input for the function under test, then proceed with testing.&lt;/p>
&lt;h2 id="nest-steps">Nest Steps&lt;/h2>
&lt;ul>
&lt;li>&lt;input disabled="" type="checkbox"> File a bug&lt;/li>
&lt;/ul>
&lt;h2 id="background-references">Background References&lt;/h2>
&lt;ul>
&lt;li>&lt;strong>Packages:&lt;/strong> &lt;a href="https://pkg.go.dev/testing/fstest">testing/fstest&lt;/a>&lt;/li>
&lt;li>&lt;strong>Useful Article:&lt;/strong> &lt;a href="https://bitfieldconsulting.com/golang/filesystems">Walking with filesystems: Go&amp;rsquo;s new fs.FS interface&lt;/a>&lt;/li>
&lt;/ul></description><category>til</category><category>golang</category><category>testing</category><category>bug</category></item></channel></rss>